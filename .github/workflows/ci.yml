name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.23', '1.24']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: List test packages
      id: packages
      shell: bash
      run: echo "packages=$(go list ./... | grep -v examples | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ${{ steps.packages.outputs.packages }}

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.23'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: List lint packages
      id: packages
      shell: bash
      run: echo "packages=$(go list ./... | grep -v examples | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m ${{ steps.packages.outputs.packages }}

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: List build packages
      id: packages
      shell: bash
      run: echo "packages=$(go list ./... | grep -v examples | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - name: Build
      run: go build -v ${{ steps.packages.outputs.packages }}

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: List benchmark packages
      id: packages
      shell: bash
      run: echo "packages=$(go list ./... | grep -v examples | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - name: Run benchmarks
      run: go test -bench=. -benchmem -run=^$ ${{ steps.packages.outputs.packages }} | tee benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt